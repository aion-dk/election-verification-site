version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.2.1
  docker: assemblyvoting/docker@1.3.0

executors:
  vm-linux-ubuntu:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
  vm-linux-ubuntu-nocache:
    machine:
      image: ubuntu-2204:current

filters: 
  - &always
    tags:
      only: /.*/

commands:
  build-image:
    parameters:
      service_name:
        type: string
      ecr_registry_id:
        type: string
        default: "534003348933"
      target:
        type: enum
        default: "development"
        enum: ["builder", "development", "production"]
      environment:
        type: enum
        default: "development"
        enum: ["development", "test", "production"]
      tag_prefix:
        type: string
        default: ""
      docker_context:
        type: string
        default: "."
    steps:
      - run:
          name: Set environment variables
          command: |
            echo "export AV_SECRET_KEY_BASE=${RANDOM}" >> "$BASH_ENV"
            echo 'export ECR_REGISTRY="<< parameters.ecr_registry_id >>.dkr.ecr.eu-west-1.amazonaws.com"' >> "$BASH_ENV"
            echo 'export ECR_REGISTRY_ID="<< parameters.ecr_registry_id >>"' >> "$BASH_ENV"
            echo 'export SSH_AUTH_SOCK=/tmp/circleci/ssh/ssh_agent.sock' >> "$BASH_ENV"
      - checkout
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-cli-version: latest
          public-registry: false
          region: eu-west-1
          registry-id: ECR_REGISTRY_ID
      - docker/ssh-access:
          VAR_SSH_KEY: PULL_SSH_KEY
      - run:
          name: Build Docker image
          command: |
            docker build << parameters.docker_context >> --target=<< parameters.target >> -t << parameters.service_name >>:<< parameters.tag_prefix >>${CIRCLE_SHA1} --ssh default 
      - run:
          name: Push untested docker image
          command: |
            docker tag << parameters.service_name >>:<< parameters.tag_prefix >>${CIRCLE_SHA1} ${ECR_REGISTRY}/<< parameters.service_name >>:<< parameters.tag_prefix >>${CIRCLE_SHA1}-untested
            docker push ${ECR_REGISTRY}/<< parameters.service_name >>:<< parameters.tag_prefix >>${CIRCLE_SHA1}-untested
  tag-tested-image:
    parameters:
      service_name:
        type: string
      ecr_registry_id:
        type: string
        default: "534003348933"
      tag_prefix:
        type: string
        default: ""
      aws_access_key_id:
        type: string
      aws_secret_access_key:
        type: string
    steps:
      - run:
          name: Set environment variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="<< parameters.aws_access_key_id >>"' >> "$BASH_ENV"
            echo 'export AWS_SECRET_ACCESS_KEY="<< parameters.aws_secret_access_key >>"' >> "$BASH_ENV"
            echo 'export ECR_REGISTRY_ID="<< parameters.ecr_registry_id >>"' >> "$BASH_ENV"
            echo 'export ECR_REGISTRY="${ECR_REGISTRY_ID}.dkr.ecr.eu-west-1.amazonaws.com"' >> "$BASH_ENV"
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-cli-version: latest
          public-registry: false
          region: eu-west-1
          registry-id: ECR_REGISTRY_ID
      - docker/tag-push:
          service: election-verification-site
          pull-tag: << parameters.tag_prefix >>"${CIRCLE_SHA1}"-untested
          push-tags: main,latest,${CIRCLE_SHA1}
  tag-final-tested-image:
    parameters:
      service_name:
        type: string
      ecr_registry_id:
        type: string
        default: "534003348933"
      aws_access_key_id:
        type: string
      aws_secret_access_key:
        type: string
    steps:
      - run:
          name: Set environment variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="<< parameters.aws_access_key_id >>"' >> "$BASH_ENV"
            echo 'export AWS_SECRET_ACCESS_KEY="<< parameters.aws_secret_access_key >>"' >> "$BASH_ENV"
            echo 'export ECR_REGISTRY_ID="<< parameters.ecr_registry_id >>"' >> "$BASH_ENV"
            echo 'export ECR_REGISTRY="${ECR_REGISTRY_ID}.dkr.ecr.eu-west-1.amazonaws.com"' >> "$BASH_ENV"
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-cli-version: latest
          public-registry: false
          region: eu-west-1
          registry-id: ECR_REGISTRY_ID
      - docker/tag-push:
          service: election-verification-site
          pull-tag: << parameters.tag_prefix >>"${CIRCLE_SHA1}"
          push-tags: ${CIRCLE_TAG}
  run-e2e:
    parameters:
      service_name:
        type: string
      ecr_registry_id:
        type: string
        default: "534003348933"
      tag_prefix:
        type: string
        default: ""
      aws_access_key_id:
        type: string
      aws_secret_access_key:
        type: string
    steps:
      - run:
          name: Set environment variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="<< parameters.aws_access_key_id >>"' >> "$BASH_ENV"
            echo 'export AWS_SECRET_ACCESS_KEY="<< parameters.aws_secret_access_key >>"' >> "$BASH_ENV"
            echo 'export ECR_REGISTRY_ID="<< parameters.ecr_registry_id >>"' >> "$BASH_ENV"
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-cli-version: latest
          public-registry: false
          region: eu-west-1
          registry-id: ECR_REGISTRY_ID
      - run:
          name: Pull the image for testing
          command: |
            docker pull 534003348933.dkr.ecr.eu-west-1.amazonaws.com/<< parameters.service_name >>:<< parameters.tag_prefix >>${CIRCLE_SHA1}-untested
      - run:
          name: Run e2e client tests
          command: |
            docker run --name=e2e -e CI="1" 534003348933.dkr.ecr.eu-west-1.amazonaws.com/<< parameters.service_name >>:<< parameters.tag_prefix >>${CIRCLE_SHA1}-untested bash -c "yarn build && yarn test:e2e:ci"
            docker cp e2e:/usr/src/app/test-results .
      - store_artifacts:
          path: test-results

  run-component:
    parameters:
      service_name:
        type: string
      ecr_registry_id:
        type: string
        default: "534003348933"
      tag_prefix:
        type: string
        default: ""
      aws_access_key_id:
        type: string
      aws_secret_access_key:
        type: string
    steps:
      - run:
          name: Set environment variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="<< parameters.aws_access_key_id >>"' >> "$BASH_ENV"
            echo 'export AWS_SECRET_ACCESS_KEY="<< parameters.aws_secret_access_key >>"' >> "$BASH_ENV"
            echo 'export ECR_REGISTRY_ID="<< parameters.ecr_registry_id >>"' >> "$BASH_ENV"
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-cli-version: latest
          public-registry: false
          region: eu-west-1
          registry-id: ECR_REGISTRY_ID
      - run:
          name: Pull the image for testing
          command: |
            docker pull 534003348933.dkr.ecr.eu-west-1.amazonaws.com/<< parameters.service_name >>:<< parameters.tag_prefix >>${CIRCLE_SHA1}-untested
      - run:
          name: Run component client tests
          command: |
            docker run --name=component -e CI="1" 534003348933.dkr.ecr.eu-west-1.amazonaws.com/<< parameters.service_name >>:<< parameters.tag_prefix >>${CIRCLE_SHA1}-untested bash -c "yarn test:unit:ci"
            docker cp component:/usr/src/app/src/test-results .
      - store_artifacts:
          path: test-results
  run-linting:
    parameters:
      service_name:
        type: string
      ecr_registry_id:
        type: string
        default: "534003348933"
      tag_prefix:
        type: string
        default: ""
      aws_access_key_id:
        type: string
      aws_secret_access_key:
        type: string
    steps:
      - run:
          name: Set environment variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="<< parameters.aws_access_key_id >>"' >> "$BASH_ENV"
            echo 'export AWS_SECRET_ACCESS_KEY="<< parameters.aws_secret_access_key >>"' >> "$BASH_ENV"
            echo 'export ECR_REGISTRY_ID="<< parameters.ecr_registry_id >>"' >> "$BASH_ENV"
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-cli-version: latest
          public-registry: false
          region: eu-west-1
          registry-id: ECR_REGISTRY_ID
      - run:
          name: Pull the image for testing
          command: |
            docker pull 534003348933.dkr.ecr.eu-west-1.amazonaws.com/<< parameters.service_name >>:<< parameters.tag_prefix >>${CIRCLE_SHA1}-untested
      - run:
          name: Run linting for client
          command: |
            docker run --rm 534003348933.dkr.ecr.eu-west-1.amazonaws.com/<< parameters.service_name >>:<< parameters.tag_prefix >>${CIRCLE_SHA1}-untested bash -c "yarn lint:ci && yarn prettier:ci"

jobs:
  lint-dockerfile-client:
    executor: vm-linux-ubuntu-nocache
    steps:
      - docker/lint:
          dockerfile: ./client/Dockerfile
  build-image-development-client:
    executor: vm-linux-ubuntu
    steps:
      - build-image:
          service_name: "election-verification-site"
          tag_prefix: "dev-"
          target: "development"
          environment: "development"
          docker_context: "./client"
  build-image-production-client:
    executor: vm-linux-ubuntu
    steps:
      - build-image:
          service_name: "election-verification-site"
          tag_prefix: ""
          target: "production"
          environment: "production"
          docker_context: "./client"
  scan-client:
    executor: vm-linux-ubuntu-nocache
    environment:
      ECR_REGISTRY_ID: "534003348933"
    steps:
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-cli-version: latest
          public-registry: false
          region: eu-west-1
          registry-id: ECR_REGISTRY_ID
      - run:
          name: Pull the image for scanning
          command: |
            docker pull ${ECR_REGISTRY_ID}.dkr.ecr.eu-west-1.amazonaws.com/election-verification-site:${CIRCLE_SHA1}-untested
      - docker/scan:
          image: ${ECR_REGISTRY_ID}.dkr.ecr.eu-west-1.amazonaws.com/election-verification-site:${CIRCLE_SHA1}-untested
          ignored_cves: "CVE-2021-32292,CVE-2023-24538,CVE-2023-24540,CVE-2024-24790"
  client-e2e:
    executor: vm-linux-ubuntu-nocache
    steps:
      - run-e2e: &client-service-aws
          service_name: "election-verification-site"
          tag_prefix: "dev-"
          aws_access_key_id: "${AWS_ACCESS_KEY_ID}"
          aws_secret_access_key: "${AWS_SECRET_ACCESS_KEY}"
  client-component:
    executor: vm-linux-ubuntu-nocache
    steps:
      - run-component:
          <<: *client-service-aws
  client-linting:
    executor: vm-linux-ubuntu-nocache
    steps:
      - run-linting:
          <<: *client-service-aws
  tag-tested-client-image-dev:
    executor: vm-linux-ubuntu-nocache
    steps:
      - tag-tested-image:
          <<: *client-service-aws
  tag-tested-client-image-prod:
    executor: vm-linux-ubuntu-nocache
    steps:
      - tag-tested-image:
          <<: *client-service-aws
          tag_prefix: ""
  tag-final-client-image-prod:
    executor: vm-linux-ubuntu-nocache
    environment:
      ECR_REGISTRY_ID: '534003348933'
    steps:
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-cli-version: latest
          public-registry: false
          region: eu-west-1
          registry-id: ECR_REGISTRY_ID
      - docker/tag-push:
          service: election-verification-site
          pull-tag: ${CIRCLE_SHA1}
          push-tags: ${CIRCLE_TAG}

workflows:
  everything:
    jobs:
      - lint-dockerfile-client:
          filters: *always
      - build-image-development-client:
          context:
            - "GIT"
            - "ECR-RW"
          requires:
            - lint-dockerfile-client
          filters: *always
      - build-image-production-client:
          context:
            - "GIT"
            - "ECR-RW"
          requires:
            - lint-dockerfile-client
          filters: *always
      - scan-client:
          requires:
            - build-image-production-client
          context:
            - "ECR-RW"
          filters: *always
      - client-e2e:
          requires:
            - build-image-development-client
          context:
            - "ECR-RW"
          filters: *always
      - client-component:
          requires:
            - build-image-development-client
          context:
            - "ECR-RW"
          filters: *always
      - client-linting:
          requires:
            - build-image-development-client
          context:
            - "ECR-RW"
          filters: *always
      - tag-tested-client-image-dev:
          requires:
            - client-e2e
            - client-component
            - client-linting
          context:
            - "ECR-RW"
          filters: *always
      - tag-tested-client-image-prod:
          requires:
            - client-e2e
            - client-component
            - client-linting
            - scan-client
          context:
            - "ECR-RW"
          filters: *always
      - tag-final-client-image-prod:
          requires:
            - tag-tested-client-image-prod
          context:
            - "ECR-RW"
          filters:
            #triggers only on semver tags
            branches:
              ignore: /.*/
            tags:
              only: /^v([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9])+(?:-(sc|rc).*)?$/
